CONSEGNA: 
    Write a Minizinc and an ASP program capable of finding a solution to the
    following  problem.
    Prepare a battery of 30 benchmark instances.
    Generate them randomly but prepare some easy/small instances (a couple
    of running time seconds),
    some average instances (a couple of minutes) and some hard instances
    (exceeding timeout).

    Run both the Minizinc and the ASP encoding on all the instances,
    possibly exploring different search strategies,
    with a timeout of 5 minutes for each test
    (``configuration'' option in Minizinc, --time-limit option in clingo, in
    both cases you can use linux tricks)

    In case of COPs, report the best value for the solution found within the
    timeout.

    Write a short report (5-10) pages report containing 1) the problem
    as written above 2) your models (and the reasons for some choices),
    and 3) a presentation of the execution results.
    Prepare the programs and the benchmark instances used in a unique zip file.


tipi di richiesta
- STRADE
- FIUMI
- SCUOLE
- ENERGIE
- PARCHI

INPUT
- elenco città 
- progetti con costo richiesti
- n. abitanti (totale: 945.000)

VINCOLI
- se città sono adiacenti & entrambe richiedono STRADE, approva al massimo ad una delle due
- ogni comune richiede almeno un progetto e viene approvato almeno un progetto
- almeno 1 milione erogato per tipologia
- al massimo 10 milioni

- richieste possono essere approvate come sono o ridotte di 10/20/30%
- si rifiutano richieste troppo costose (definire criteri)

GOAL
- massimizzare spesa <= 10.000.000
- minimizzare somma delle richieste non erogate/ridotte

------

scuole: 

mean  = 100.000
2mean = 200.000

req: 150.000   ratio: 100.000/161.000 = 0.62
req:  50.000   ratio: 100.000/55.000  = 1.81
req: 100.000   ratio: 100.000/20.000  = 5

{
    mean = sum(requests)
    mean2 = 2*mean

    forall cities:
        ratio = mean / city.people
        if request * ratio > mean2 then reject
}

parchi:
se la spesa supera 2 volte la % di abitanti della citta rispetto alla somma delle richieste per i parchi non viene concesso il finanziamento

(people/ all_people) * sum(requests) > c.parks

energie:
se una città ha chiesto finanziamenti per tutti gli altri progetti e ha meno di 20.000 abitanti, non viene concesso il finanziamento

-----

istanze: 
- 2 non risolvibili
- 5 facili
- 5 medie
- 5 difficili
- 13 random